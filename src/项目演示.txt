1、 首先，我们要会找到spring 项目需要的jar包，并在src目录下创建 applicationContext.xml 配置文件（都可以直接复制）

2、 通过SpringDemo01.java 我们要有够懂得如何通过配置文件告诉spring 容器自动创建 student 对象，并注入我们需要的属性值。
	要求: 【最基本】要会配置 bean 对象
	 	【重要】   理解IOC （控制反转）和 DI（这依赖注入） 的概念和意义 
	 	【重要】  依赖注入的两种方式： 构造方法注入      <constructor-arg >   : 必须提供有参构造
	 				   setter 方法注入   <property >  : 必须提供setXXX() 方法， 注意 property 标签里面的name 要跟XXX对应
	 	
	 	【重要】 注入的类型：
	 			1、 普通值    
	 			2、 引用类型
	 			3、 集合
	 	
	 	 【了解一下】 要会使用    ClassPathXmlApplicationContext 创建spring容器, 并通过容器拿到我们需要的 bean 对象。
	 	 			整合以后，不需要我们这样显示地去创建容器和获取对象。

2、 通过 SpringDemo02.java 演示一下 spring 容器中 bean 的生命周期【要能讲出大概的过程】
			构造方法
			setter 注入
			BeanNameAware  ----> 通知一下你这个对象的 id 是啥
			BeanFactoryAware -----> 通知一下你 beanFactory 对象是啥，但是这个 beanFactory 有什么用不知道
			ApplicationContextAware----> 通知一下你容器的对象是啥，你可以直接从这个容器对象里面获取已经创建好的其他对象
			MyBeanPostProcessor中的 before() 方法-----> 可以对容器中的 bean 对象在其初始化前进行拦截，你可以使用一个代理对象来替换bean对象
			InitializingBean----> 你可以在这个接口的 afterPropertiesSet() 方法中执行一些另外的初始化操作
			自定义的init() 方法执行了！----> 这个方法的方法名是我们自己定义的，但是需要在xml 里面配置 init-method 
			MyBeanPostProcessor中的 after() 方法---->可以对容器中的 bean 对象在其初始化后再一次进行拦截，同样你也可以使用一个代理对象来替换bean 对象
			
			到此阶段， spring 容器中的 bean 对象已经完全初始化完毕！！！ 你可以随意获取并调用bean 对象里面的方法了！！
			
			DisposableBean : 调用destroy() 方法----> 在spring 容器关闭之前，会先调用里面的所有bean 对象的 destroy()方法进行销毁前的一些常规性操作
			自定义的 destroy() 方法执行了！ ----> 这个方法的方法名是我们自己定义的，但是需要在 xml 里面配置 destroy-method
			
3、 这里并不演示注解配置bean 和 依赖注入，但是你要明白下面的这些注解的含义：
	使用注解下面这些注解之前，我们一定要先在配置文件配置下面信息，这样子注解才能生效：
	<context:component-scan base-package="xxxx" />
	<context:annotation-config>
	
	配置bean 对象的注解 【常用】
		@Component
		@Controller
		@Service
		@Repository
		
	配置 setter 注入的注解【常用】 
		@Autowired
		@Qualifier
		@Resource
		
	配置 bean 对象作用域的注解【常用】
		@Scope----->   singleton/ prototype【一定要会】【默认就是单例的，如果配置 struts的action 一定要配置 prototype】
					   request/ session/ globalSession 【了解】
					   
	配置	 @PostConstruct    相当于xml配置自定义的 init 方法：  init-method
		 @PreDestroy       相当于 xml 配置自定义的 destroy 方法： destroy-method	
		 
4、 演示jdk 动态代理 和 cglib 动态代理 如何创建代理对象:
	jdk 动态代理是java 内置的，不需要我们导包，但是要求被代理的对象必须实现某个接口。其基本的思路是： 
		首先，创建一个跟被代理对象实现同一个接口或者同一组接口的对象
			----> 就像是创建一个被代理对象的兄弟，现在被代理对象有什么方法，这个兄弟对象也差不多有什么方法
		然后，通过 invocationhandler 接收一个被代理对象的实例， 对于保留的功能，都可以调用被代理对象的方法来实现，
			对于需要加强的部分，我们再手动去实现
		最后，创建出来的代理对象既有原对象的功能，还有加强的功能。  因为代理对象与被代理对象实现同一组接口，根据多态的原理，
			如果你使用接口类型来接收的话，那么从外表上来看，你看不出代理对象和被代理对象有什么区别。
	
	cglib 动态代理需要我们导包才可以使用，但是导包的麻烦绝对是值得的。 因为 cglib 动态代理比jdk 代理要强大很多。
		jdk 代理要求被代理的对象必须实现某个接口，但是cglib 根本就不需要被代理对象实现什么接口，只要是个对象就可以了。
		cglib 动态代理的基本思路是：
		首先，你得创建一个enhancer  对象，这是cglib 代理的核心类
		然后，你得告诉 enhancer 对象要加强的对象的class 对象是什么， cglib 其实会根据你设置的这个 class 对象去生成一个
			这个类的子类对象，因为是子类对象，所以父类有的方法，只要不是private 修改的方法，子类对象都会有的
		再然后，就是设置回调函数，这个回调函数的大概作用就是： 当你通过最终生成的代理对象去调用方法的时候，最终都是先调用这个回调
			函数，再通过这个回调函数去调用原来对象的本身的方法。 相当于子类对象，全部重写了父类的方法，并在父类方法外面加了一层方法。
			加的这层方法，你可以什么都不干，就调用原来父类的方法
			也可以加一些自己的功能，再调用父类的方法
			也可以完全不用父类的方法，自己来实现
		最后，因为cglib 生成的代理对象是被代理对象的子类对象，所以你可以直接把代理对象强转成 被代理对象的类型。
		
	通过   springDemo03.java 演示两种动态代理的具体操作！

5、 我们熟悉了 jdk 和 cglib 动态代理以后，我们就可以开始学习 spring 的aop 编程了
		所谓的 aop 编程，直译就是面向切面编程，这是一种设计模式或者说是一种理念。
		传统的面向对象编程，可以利用继承来减少重复性的代码，但是继承的最小单位是方法，也就是说你要么整个方法都继承，要么重写。
		如果你只是想在每个类的首尾加一些简单的代码或者变量，用来统计方法的运行时间，使用传统的面试对象，你必须在子类中重写所有的父类方法。
		如果父类的方法不多，那还好说，但是如果父类的方法有几十个！！ 那么工作量就很大了！
		就算你不使用继承，你用装饰者模式或者静态代理，在装饰类或者代理类中引入被装饰或者被代理的对象，但是本质上还是父类有多少方法，你就得重写多少个方法。
		
		而使用 aop 编程则可以突破这个最小的单位， 我们可以先把每个方法中的共性东西都抽取出来，然后写成一个或者多个小方法，再通过反射技术
		把这些小方法 “织入”父类的每个方法中去。 这样子一来，我们的代码就更加简洁，耦合度更低了，更有利于模块化开发和后期的维护。
	
		spring 的 aop 的底层原理就是 jdk 和 cglib 的动态代理。
		 如果我们想要对容器中的某个对象的某些方法织入一些额外的功能，或者说加强某个对象的某些方法，
		 	那么最原始的方法就是通过  beanpostprocessor 来生成和替换代理对象。【默认是对容器中的所有对象的所有方法都拦截】
		
		当然，上面的那种方法需要我们自己手动去实现动态代理，比较麻烦，spring 为了简化我们的操作，特意引入了 aspectj 和 aop 联盟规范，
		然后这些复杂的动态代理实现代码都不需要我们自己去写了，我们只要把要加强的方法统一写在一个   aspect 类中，然后通过配置文件配置好
		需要对容器中的哪一个对象进行加强，那么 spring 框架就会自动帮我们生成动态代理对象！！
		
	通过  springDemo04.java 演示spring 通过配置xml 的方式实现 aop 编程
		手动的 aop 编程：
			springdemo02.java 其实就是手动的 aop 编程
		半自动的  aop 编程：
			现在我们需要把 targetImpl 对象交由 spring 容器来创建，并且通过配置文件告诉 spring 容器如何生成这个对象的代理对象
			
			首先，我们把要加强的方法统一写到一个切面类里面去，这个切面类需要实现aop 联盟提供的五个通知类型接口中至少一个接口：
				前置通知：org.springframework.aop.MethodBeforeAdvice ----> 在目标方法执行前实施增强
				后置通知：org.springframework.aop.AfterReturningAdvice----> 在目标方法执行后实施增强
				环绕通知【要求要会】：org.aopalliance.intercept.MethodInterceptor----> 在目标方法执行前后实施增强
				异常抛出通知： org.springframework.aop.ThrowsAdvice----> 在方法抛出异常后实施增强
				引介通知：org.springframework.aop.IntroductionInterceptor----> 在目标类中添加一些新的方法和属性
			
			然后，我们应该把这个切面类对象配置到spring 容器中
			再然后，我们需要用另一个bean 标签配置 targetImpl 对象的代理对象， 这个代理对象需要由spring 提供的 ProxyFactoryBean 来生成
				我们需要给这个 ProxyFactoryBean 提供如下的参数：
				interfaces ---->  Class<?>[] 被代理对象实现的接口（其实可以省略）,写接口的全路径名
				target  ---->     被代理对象的引用
				interceptorNames ----> 切面类对象对应的 id ，可以有多个切面类对象 id， 注意值要用 value来写
			
			【注意】 半自动的 aop 编程，一定程度上减少了动态代理的代码，因为 spring 已经帮我们写好了ProxyFactoryBean
					我们只需要编写一下  切面类， 另外再配置好 xml 就行了
					
				缺点：  每个代理对象，你都得用一个 bean 标签配置一遍！！！ 
					 还要显示地指定  ProxyFactoryBean 来生成代理对象！！
					 
		全自动的 aop 编程：
			半自动的 aop 还是太麻烦了，所以spring 又引入了另一个 叫aspect 的 aop框架简化aop 编程。
			
			aspectj 框架的厉害之处在于其引入了切入点表达式，我们可以通过一个表达式来选择符合要求的特定对象的特定方法
			这样子，我们就不需要每个代理对象都用一个 bean 标签来配置一遍，只要配置一个或者几个表达式，就可以配置完所有的代理对象
			
			aspectj 跟aop 联盟差不多，也定义了自己的通知类型：
				before: 方法执行前！
				around: 方法执行的前和后，还能控制是否执行原方法【最最常用】
				afterThrowing: 方法如果抛出异常时执行
				afterReturning: 方法正常执行完以后执行此方法，但是如果方法抛异常，此方法不执行
				after: 无论方法是否抛异常，都会执行此方法！
			
			aspectj 最大的优势在于使用 切入点表达式：
				切入点表达式有点像模糊查询，可以非常方便地指定要对 哪个包下、哪个类、哪个方法进行增强，不需要一个一个类地指定
				execution(* com.itcast.service.*.*(..))
					任意返回值    包名（service包下的）  任意类  任意方法    任意参数
				
				
			【注意】好处： aspectj 的这些通知类型，并不是接口，只是一个规范而已。切面类的具体的方法名你可以随便起，只要在配置文件
					中，把方法和标签对应起来就可以了。而aop 联盟的通知类型则是接口，你必须实现，并重写特定的方法。
				
				缺点： 虽然你的方法名可以随意 ，但是你的方法必须接收特定的参数！！！ 
						因为没有接口规范，这些参数你得死记硬背下来！！！【其实还不如用接口呢】
		